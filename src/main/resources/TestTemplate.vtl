package $package;

import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import org.junit.runner.RunWith;
import org.openqa.selenium.*;
import org.openqa.selenium.firefox.FirefoxDriver;

public class ${ClassToTest}SeleniumTest {

    private WebDriver driver;
    private String baseUrl;
    private StringBuffer verificationErrors = new StringBuffer();
    private String indexPage;

    @Before
    public void setUp() throws Exception {
        driver = new FirefoxDriver();  ## nastavení ?
        baseUrl = "http://localhost:8080/";
        indexPage = "/${projectName}/faces/index.xhtml"; ## faces?
        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
    }

    @Test
    public void testCRUD() throws Exception {
        // Create
        driver.get(baseUrl + indexPage);
        driver.findElement(By.linkText("${ClassToTest}")).click(); ## Base, vždycky název třídy?
        driver.findElement(By.linkText("Create New")).click();

        #foreach( $field in $fields )
            #if( $field.getName() != "id" && $field.getName() != "version" )
                #set( $fieldName = $field.getName() )
                #set( $FieldName = $field.getName().substring(0,1).toUpperCase() + $field.getName().substring(1) )

                // ${fieldName}
                WebElement ${fieldName}TextBox = driver.findElement(By.id("create:${classToTest}Bean${ClassToTest}${FieldName}"));
                ${fieldName}TextBox.clear();
                String ${fieldName} = "test_${fieldName}";    ## test item?
                ${fieldName}TextBox.sendKeys(${fieldName});
            #end
        #end
        driver.findElement(By.linkText("Save")).click();

        assertTrue(isElementPresent(By.id("search:${classToTest}BeanPageItems:0:item$FieldName")));
        driver.findElement(By.id("search:${classToTest}BeanPageItems:0:item$FieldName")).click();

        try {
            #foreach( $field in $fields )
                #if( $field.getName() != "id" && $field.getName() != "version" )
                    #set( $fieldName = $field.getName() )
                    #set( $FieldName = $field.getName().substring(0,1).toUpperCase() + $field.getName().substring(1) )
                    WebElement ${fieldName}Result = driver.findElement(By.id("${classToTest}Bean${ClassToTest}$FieldName"));
                    assertTrue(${fieldName}Result.getText().matches(${fieldName}));
                #end
            #end
        } catch (Error e) {
            verificationErrors.append(e.toString());
        }

        // Edit
        driver.get(baseUrl + indexPage);
        driver.findElement(By.linkText("${ClassToTest}")).click();

        driver.findElement(By.id("search:${classToTest}BeanPageItems:0:item${FieldName}")).click();
        driver.findElement(By.linkText("Edit")).click();

        #foreach( $field in $fields )
            #if( $field.getName() != "id" && $field.getName() != "version" )
                #set( $fieldName = $field.getName() )
                #set( $FieldName = $field.getName().substring(0,1).toUpperCase() + $field.getName().substring(1) )

                // ${fieldName}
                ${fieldName}TextBox = driver.findElement(By.id("create:${classToTest}Bean${ClassToTest}${FieldName}"));
                ${fieldName}TextBox.clear();
                String new${FieldName} = "test_${fieldName}2";
                ${fieldName}TextBox.sendKeys(new${FieldName});
            #end
        #end
        driver.findElement(By.linkText("Save")).click();

        try {
            #foreach( $field in $fields )
                #if( $field.getName() != "id" && $field.getName() != "version" )
                    #set( $fieldName = $field.getName() )
                    #set( $FieldName = $field.getName().substring(0,1).toUpperCase() + $field.getName().substring(1) )
                    WebElement ${fieldName}Result = driver.findElement(By.id("${classToTest}Bean${ClassToTest}${FieldName}"));
                    assertTrue(${fieldName}Result.getText().matches(new${FieldName}));
                #end
            #end
        } catch (Error e) {
            verificationErrors.append(e.toString());
        }

        // Delete
        driver.get(baseUrl + indexPage);
        driver.findElement(By.linkText("${ClassToTest}")).click();

        assertTrue(isElementPresent(By.id("search:${classToTest}BeanPageItems:0:item${FieldName}")));
        driver.findElement(By.id("search:${classToTest}BeanPageItems:0:item${FieldName}")).click();
        driver.findElement(By.linkText("Edit")).click();
        driver.findElement(By.linkText("Delete")).click();

        driver.findElement(By.linkText("${ClassToTest}")).click();
        assertFalse(isElementPresent(By.id("search:${classToTest}BeanPageItems:0:item${FieldName}")));
    }

    @After
    public void tearDown() throws Exception {
        driver.quit();
        String verificationErrorString = verificationErrors.toString();
        if (!"".equals(verificationErrorString)) {
            fail(verificationErrorString);
        }
    }

    private boolean isElementPresent(By by) {
        try {
        driver.findElement(by);
        return true;
        } catch (NoSuchElementException e) {
            return false;
        }
    }
}
